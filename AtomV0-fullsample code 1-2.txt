1-2
# atomv0-fullsample: Task Representation Module & # atomv0-fullsample: Task Lifecycle Module

python

# atomv0-fullsample: Task Representation Module

class Task:
    def __init__(self, description, priority, deadline, dependencies, status):
        self.description = description
        self.priority = priority
        self.deadline = deadline
        self.dependencies = dependencies
        self.status = status

    def update_status(self, new_status):
        self.status = new_status

    def __str__(self):
        return f"Task(description={self.description}, priority={self.priority}, deadline={self.deadline}, dependencies={self.dependencies}, status={self.status})"

# Example usage:

# Create a new task with the given attributes
new_task = Task("Complete the report", 3, "2023-04-20", ["Gather data", "Analyze data"], "pending")

# Print the task details
print(new_task)

# Update the task status to "in progress"
new_task.update_status("in progress")

# Print the updated task details
print(new_task)

In this sample code, I've created a Task Representation module for atomv0-fullsample. The Task class has customizable attributes like description, priority, deadline, dependencies, and status. The update_status method allows updating the task's status. The example usage demonstrates how to create a new task, print its details, update its status, and print the updated details.



python

# atomv0-fullsample: Task Lifecycle Module

class TaskLifecycle:
    def __init__(self):
        self.tasks = []

    def add_task(self, task):
        self.tasks.append(task)

    def remove_task(self, task_id):
        self.tasks = [task for task in self.tasks if task.task_id != task_id]

    def modify_task(self, task_id, **kwargs):
        for task in self.tasks:
            if task.task_id == task_id:
                for attr, value in kwargs.items():
                    if hasattr(task, attr):
                        setattr(task, attr, value)
                break

    def execute_task(self, task_id):
        for task in self.tasks:
            if task.task_id == task_id:
                task.status = "in progress"
                break

    def complete_task(self, task_id):
        for task in self.tasks:
            if task.task_id == task_id:
                task.status = "completed"
                break

    def __str__(self):
        tasks_str = ', '.join(map(str, self.tasks))
        return f"TaskLifecycle(tasks=[{tasks_str}])"

# Example usage:

# Instantiate a Task Lifecycle manager
task_lifecycle = TaskLifecycle()

# Add tasks to the Task Lifecycle manager
task1 = Task("Complete the report", 3, "2023-04-20", ["Gather data", "Analyze data"], "pending", 1)
task2 = Task("Write a summary", 2, "2023-04-19", [], "pending", 2)
task_lifecycle.add_task(task1)
task_lifecycle.add_task(task2)

# Print the task list
print(task_lifecycle)

# Modify a task's deadline and priority
task_lifecycle.modify_task(1, deadline="2023-04-18", priority=1)

# Execute a task
task_lifecycle.execute_task(2)

# Print the updated task list
print(task_lifecycle)

# Complete a task
task_lifecycle.complete_task(2)

# Print the updated task list
print(task_lifecycle)

# Remove a task
task_lifecycle.remove_task(1)

# Print the updated task list
print(task_lifecycle)

In this sample code, I've created a Task Lifecycle module for atomv0-fullsample. The TaskLifecycle class has methods to add, remove, modify, execute, and complete tasks. The example usage demonstrates how to create a Task Lifecycle manager, add tasks, modify their attributes, execute tasks, complete tasks, and remove tasks from the manager.